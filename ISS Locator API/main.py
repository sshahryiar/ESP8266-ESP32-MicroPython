from machine import Pin, I2C, WDT
from utime import sleep_ms
from SSD1306_I2C import OLED1306
from iss_location_api import iss_location
from unix_time import unix
import network
import framebuf
import gc
import math
import WiFi_Credentials 


ip = 0
LED_state = True
connection_status = False
map_display = False
year = 1970
month = 1
date = 1
hour = 0
minute = 0
second = 0


world_map = framebuf.FrameBuffer(bytearray(
    b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\x3f\x3f\x3f\x3f\x3f\x3f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x5f\x7f\x9f\x7f\x3f\xff\xff\x5f'
    b'\x3f\x7f\x7f\xff\xdf\xbf\x37\x77\xfb\xfb\xfb\xf7\x77\x07\x03\x07\x07\x07\x83\x83\x83\xc3\xf3\xfb\xfb\xff\xff\xff\xff\xff\xff\xff'
    b'\xff\xff\x7f\x7f\x7f\x3f\x7f\x7f\xff\xff\xff\x7f\x7f\x7f\x7f\x7f\x7f\x3f\xff\x3f\x1f\x1f\x0f\x0f\x0f\x0f\x0f\x0f\x1f\x1f\x1f\x1f'
    b'\x1f\x1f\x3f\x3f\x3f\x3f\x1f\x3f\x3f\x3f\x3f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
    b'\xff\xff\xff\xff\xff\xff\xf9\xf9\xfc\xfc\xfc\xfc\xfc\xfc\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x80\x04\x0c\x3e\x3e'
    b'\x1f\x07\x83\x41\xc3\xc6\xc6\x5f\xff\xff\xff\xff\xfc\xfc\xfe\xff\xff\xff\xff\xff\xff\xfe\xfe\xfe\xdf\xff\xff\x5f\x3f\x3f\x1b\x19'
    b'\x10\x18\x1e\x1d\x04\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
    b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x18\x38\xfc\xfc\xfc\xf0\xe4\xfc\xfd\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
    b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc3\x81\x00\x00\x00\x00\x00\x00\x00\x80\x80\x80\x80\x80\x02\xc1\xe7\xf0\xf2\xf8'
    b'\xfc\xfe\xfe\xfe\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\x33\x33\x33\x18\x1c\x1c\x1e\x1e'
    b'\x3c\x7a\x7c\x78\x78\x78\x77\x77\x77\x67\x06\x04\x00\x02\x8f\x9d\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
    b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x08\x78\xf0\xec\xfc\xff\xff\xdd\xef\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
    b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xf8\xe0\xe0\xe0\xcc\xdf\x9f\xaf\x3f\xff\xff\xfe\xf7\xff\xff\xff\xff'
    b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
    b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x0e\x18\x60\x80\x80\x81\xc3\xc6\xf2\xfc\xfc\xfc\xfc\xfc\xf0\xf0\x80\x00\x00\xe0\xf0\xf8'
    b'\xf8\xf0\xe0\xc0\x00\x80\x00\x38\x78\xf8\xf8\xfc\xff\x9f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
    b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\x3d\x0f\x01\x00\x00\x00\x01'
    b'\x01\x01\x03\x07\x07\x0f\x1f\x3f\x3f\x7f\x7f\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xfc\xf8\xf8\xf8\xf8\xfc\xfc\xf8\xf8\xd0'
    b'\x80\x00\x00\x00\x00\x00\x00\x00\x20\x20\x00\x80\xc0\xe1\xf8\xfc\xfe\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff\xff'
    b'\xff\xff\xff\xff\xec\xdb\xbf\xfe\xff\xcf\x8f\x87\xe7\xbf\xff\xfd\xff\xff\xff\xff\xff\x3f\x7f\x7f\xff\xff\xff\xff\xff\xff\xff\xff'
    b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xf8\xf0\xe0\xc0\x00'
    b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x80\xfc\xfe\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
    b'\xcf\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\xe0\xff\x7f\x0f\xe7\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
    b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\x7f\x3f\x1f\x0f\x0f\x07\x07\x1f\x3f\x1f\x07\x7e\xfe\xfe\xfe\xfd\xff\xff\xff\xff\xff\xff'
    b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00'
    b'\x00\x00\x00\x80\x80\xe0\xf0\xfc\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
    b'\xff\xfe\xf8\xe0\xe0\xe0\xf0\xf8\xfe\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
    b'\xff\xff\xff\xff\xff\xff\xff\xee\xe0\xe0\xf0\xf0\xf0\xf0\xe0\xf0\xc0\xc0\x80\xc0\xe0\xf0\xf8\xff\xff\xff\xff\xff\xff\xbf\xff\xff'
    b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
    b'\xf8\xf0\xe0\xdf\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
    b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
    b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\xff\xff\xff\xff\xff\xff'),
    128, 64, framebuf.MONO_VLSB)


gc.collect()
LED = Pin(2, Pin.OUT)
wdt = WDT(timeout = 9000)
i2c = I2C(0, sda = Pin(21), scl = Pin(22), freq = 250000)
oled = OLED1306(i2c)
wifi_sta = network.WLAN(network.STA_IF)
iss = iss_location()
rtcc = unix(+6)


def map_value(v, x_min, x_max, y_min, y_max):
    return int(y_min + (((y_max - y_min) / (x_max - x_min)) * (v - x_min)))


def ring(x, y, r, c):
    oled.pixel((x - r), y, c)
    oled.pixel((x + r), y, c)
    oled.pixel(x, (y - r), c)
    oled.pixel(x, (y + r), c)
    oled.show()
    sleep_ms(10)
    for i in range(1, r):
        a = int(math.sqrt((r * r) - (i * i)))
        oled.pixel((x - a), (y - i), c)
        oled.pixel((x + a), (y - i), c)
        oled.pixel((x - a), (y + i), c)
        oled.pixel((x + a), (y + i), c)
        oled.pixel((x - i), (y - a), c)
        oled.pixel((x + i), (y - a), c)
        oled.pixel((x - i), (y + a), c)
        oled.pixel((x + i), (y + a), c)
        oled.show()


def connect_and_check_wifi_status():
    global ip, connection_status, LED_state
    
    wdt.feed()
    sleep_ms(900)
    
    if(wifi_sta.isconnected()):
        if(connection_status == False):
            print("Connected to WiFi Network with SSID: " + WiFi_Credentials.SSID + " and with IP address: " + wifi_sta.ifconfig()[0] + "\r\n")
            ip = wifi_sta.ifconfig()[0]
            connection_status = True
            
    else:
        wifi_sta.active(True)
        wifi_sta.disconnect()
        wdt.feed()
        sleep_ms(30)
        wifi_sta.connect(WiFi_Credentials.SSID, WiFi_Credentials.password)
        wdt.feed()
        sleep_ms(60)
        print("Network Unavailable!" + "\r\n")
        LED_state ^= 0x01
        LED.value(LED_state)
        wdt.feed()
        sleep_ms(9)
        connection_status = False


while(True):
    try:
        connect_and_check_wifi_status()

        
        if(connection_status == False):
            oled.fill(oled.BLACK)
            oled.text("ESP ISS Locator.", 0, 0, oled.WHITE)
            oled.text("Network Error!", 0, 14, oled.WHITE)
            oled.text("....", 0, 28, oled.WHITE)
            map_display = False
            wdt.feed()
        
        else:
            utc, lat, lon = iss.fetch_data()
            
            year, month, date, hour, minute, second = rtcc.unix_to_date_time(utc)
            print("Time: " + str("%02u" %hour) + ":" + str("%02u" %minute) + ":" + str("%02u" %second)
                  + "  Date: " + str("%02u" %date) + "/" + str("%02u" %month) + "/" + str("%4u" %year))
            print("Lat: " + lat + "  Lon: " + lon + "\r\n")
        
            wdt.feed()
            
            if(map_display == True):
                oled.blit(world_map, 0, 0)
                wdt.feed()
                y_pos = map_value(float(lat), -90, 90, 63, 0)
                x_pos = map_value(float(lon), -180, 180, 0, 127)
                ring(x_pos, y_pos, 3, oled.BLACK)
                ring(x_pos, y_pos, 2, oled.WHITE)
                wdt.feed()
                
            else:
                oled.fill(oled.BLACK)
                oled.text("ESP ISS Locator.", 0, 0, oled.WHITE)
                oled.text(("WiFi: " + WiFi_Credentials.SSID), 0, 14, oled.WHITE)
                oled.text(("Time: " + str("%02u:" %hour) + str("%02u:" %minute) + str("%02u" %second)), 0, 24, oled.WHITE)
                oled.text(("Date: " + str("%02u/" %date) + str("%02u/" %month) + str("%4u" %year)), 0, 34, oled.WHITE)
                oled.text("Lat: " + lat, 0, 44, oled.WHITE)
                oled.text("Lon: " + lon, 0, 54, oled.WHITE)
                wdt.feed()

            LED_state ^= 0x01
            LED.value(LED_state)
            map_display ^= 0x01
            wdt.feed()

        oled.show()
        sleep_ms(2000)
    
    except KeyboardInterrupt:
        pass